{
    "openapi": "3.0.0",
    "info": {
        "title": "Servic API for user can drive car",
        "contact": {
            "email": "admin@example.com"
        },
        "license": {
            "name": "nginx 1.18.0",
            "url": "http://nginx.org/LICENSE"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://foundarium.loc/api",
            "description": "Foundarium Swagger API server"
        }
    ],
    "paths": {
        "/cars": {
            "get": {
                "tags": [
                    "Cars"
                ],
                "summary": "Get cars with pagination",
                "operationId": "carsAll",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Everything is fine"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Cars"
                ],
                "summary": "Create new car",
                "operationId": "carCreate",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Car"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Car create succes",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Car"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Wrong credentials response"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/cars/{id}": {
            "get": {
                "tags": [
                    "Cars"
                ],
                "summary": "Get car by ID",
                "operationId": "carGet",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of car",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Everything is fine",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Car"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Car not found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Cars"
                ],
                "summary": "Update car by id",
                "operationId": "carUpdate",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of car",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Car"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Car update succes",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Car"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Car not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Car"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Cars"
                ],
                "summary": "Delete car by id",
                "operationId": "carDelete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of car",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Deleted"
                    },
                    "404": {
                        "description": "Car not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Car"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/available-cars": {
            "get": {
                "tags": [
                    "Drives"
                ],
                "summary": "Free cars for driving",
                "operationId": "freeCars",
                "responses": {
                    "200": {
                        "description": "We have free cars"
                    },
                    "404": {
                        "description": "Free cars not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Car"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/drive/{user_id}/{car_id}": {
            "get": {
                "tags": [
                    "Drives"
                ],
                "summary": "Get free car for driving",
                "operationId": "driveCar",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "The user id for driving car",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    },
                    {
                        "name": "car_id",
                        "in": "path",
                        "description": "The car id for user",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Car create succes",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Car"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Car not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Car"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/remove-car/{car_id}": {
            "get": {
                "tags": [
                    "Drives"
                ],
                "summary": "Remove user of car",
                "operationId": "removeCar",
                "parameters": [
                    {
                        "name": "car_id",
                        "in": "path",
                        "description": "The car id with user driver",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Remove car of driver success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Car"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Car not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Car"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get users with pagination",
                "operationId": "usersAll",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Everything is fine"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/users/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "operationId": "carUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of user",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Everything is fine",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "BaseModel": {
                "properties": {
                    "created_at": {
                        "description": "Initial creation timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": "true"
                    },
                    "updated_at": {
                        "description": "Last update timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": "true"
                    },
                    "deleted_at": {
                        "description": "Soft delete timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": "true"
                    }
                },
                "type": "object"
            },
            "Car": {
                "required": [
                    "password"
                ],
                "type": "object",
                "xml": {
                    "name": "Car"
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseModel"
                    },
                    {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "readOnly": "true",
                                "example": "1"
                            },
                            "user_id": {
                                "description": "User id for driving car",
                                "type": "integer",
                                "readOnly": "true"
                            },
                            "name": {
                                "description": "Car name",
                                "type": "string",
                                "readOnly": "true",
                                "example": "UAZ"
                            },
                            "type": {
                                "description": "Car type",
                                "type": "string",
                                "readOnly": "true",
                                "example": "crossover"
                            },
                            "created_at": {
                                "$ref": "#/components/schemas/BaseModel/properties/created_at"
                            },
                            "updated_at": {
                                "$ref": "#/components/schemas/BaseModel/properties/updated_at"
                            },
                            "deleted_at": {
                                "$ref": "#/components/schemas/BaseModel/properties/deleted_at"
                            }
                        }
                    }
                ]
            },
            "User": {
                "required": [
                    "password"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": "true",
                        "example": "1"
                    },
                    "email": {
                        "description": "User unique email address",
                        "type": "string",
                        "format": "email",
                        "readOnly": "true",
                        "example": "user@gmail.com"
                    },
                    "email_verified_at": {
                        "description": "Datetime marker of verification status",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": "true",
                        "example": "2019-02-25 12:59:20"
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 32,
                        "example": "John"
                    },
                    "created_at": {
                        "$ref": "#/components/schemas/BaseModel/properties/created_at"
                    },
                    "updated_at": {
                        "$ref": "#/components/schemas/BaseModel/properties/updated_at"
                    },
                    "deleted_at": {
                        "$ref": "#/components/schemas/BaseModel/properties/deleted_at"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "User"
                }
            }
        },
        "securitySchemes": {
            "X-APP-ID": {
                "type": "apiKey",
                "name": "X-APP-ID",
                "in": "header"
            }
        }
    },
    "tags": [
        {
            "name": "Foundarium API",
            "description": "Drives cars"
        }
    ]
}